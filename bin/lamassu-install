#!/usr/bin/env bash
set -e

function exists() {
  which $1 > /dev/null 2>&1
}

function fail() {
  echo $1
  echo "Please contact Lamassu support (support@lamassu.is), including "
  echo "command output and lamassu-debug.log file"
  exit 4
}

function upstart() {
  package="$1"

  cat > "/etc/init/$package"".conf" <<EOF
exec $package --key /root/$package\.key --cert /root/$package\.crt
respawn
start on startup
env DATABASE_URL=postgres://lamassu:$password@localhost/lamassu
env NODE_ENV=production
chdir $(npm -g explore $package pwd)
EOF
}

function prompt() {
  question="$1"
  default="$2"
  silent="$3"
  var="$4"

  echo -n "$question: "
  if [ ! -z "$default" ]; then
    echo -n "($default) "
  fi

  if [ "$silent" = true ]; then
    read -s result
    echo
  else
    read result
  fi

  if [ -z "$result" ]; then
    export "$var=$default"
  else
    export "$var=$result"
  fi
}

echo
echo "Hello! This script will install Lamassu Remote Server."
echo

if [ "$(whoami)" != "root" ]; then
  echo "This script has to be run as \`root\`"
  exit 3
fi

debug="lamassu-debug.log"
prefix="/usr/local"
node="http://nodejs.org/dist/v0.10.32/node-v0.10.32-linux-x64.tar.gz"

# First detect our package manager. Fail early if we don't support it.
update=""
install=""

rm -f lamassu-debug.log

if exists apt-get; then
  update="apt-get update -y"
  upgrade="apt-get upgrade -y"
  install="
    apt-get update -y &&
    apt-get install -y  postgresql postgresql-contrib libpq-dev git build-essential python curl &&
    /etc/init.d/postgresql start
  "
fi

if [ -z "$install" ]; then
  echo "Your package manager isn't supported"
  echo "This script currently supports apt-get"
  exit 1
fi

# Then detect our service management system. Also fail early if we don't
# support it.
# Remark: `upstart` appears to be going away from Ubuntu in lieu of `systemd`.
service=""

if exists start && [ -d "/etc/init" ]; then
  service="upstart"
fi

if [ -z "$service" ]; then
  echo "Your service manager isn't supported"
  echo "This script currently supports upstart"
  exit 2
fi

echo "We'll now ask you a couple of questions in order to configure "
echo "this installation."
echo

echo "Pick your admin panel credentials:"
prompt "Username" "admin" false admin_username
prompt "Password" "" true admin_password


echo
echo "Updating your system (this might take a while)..."

locale-gen en_US.UTF-8 >> $debug 2>&1
export LANGUAGE="en_US.UTF-8"
export LC_ALL="en_US.UTF-8"
echo 'LANGUAGE="en_US.UTF-8"' >> /etc/default/locale
echo 'LC_ALL="en_US.UTF-8"' >> /etc/default/locale

eval $update >> $debug 2>&1
eval $upgrade >> $debug 2>&1

[ $? -ne 0 ] && fail "Updating your system failed"

# Install PostgreSQL with the package manager we found.
echo
echo "Installing PostgreSQL (this might take a while)..."
eval $install >> $debug 2>&1

[ $? -ne 0 ] && fail "PostgreSQL installation failed"

# Set up users and databases in Postgres.
# Remark: do we want lamassu to be a super user?
password=$(openssl rand -hex 32)
su - postgres >> $debug 2>&1 <<EOF
  dropdb lamassu
  dropuser lamassu
  psql -c "CREATE ROLE lamassu WITH LOGIN SUPERUSER PASSWORD '$password';"
  createdb -O lamassu lamassu
EOF

echo "{\"postgresql\":\"postgres://lamassu:$password@localhost/lamassu\"}" > /etc/lamassu.json

echo "Fetching and installing node.js..."

# Install node in $prefix
curl "$node" | tar -C"$prefix" --strip-components=1 -zxf-

[ $? -ne 0 ] && fail "Node.js installation failed"

echo "Installing Lamassu stack (this might take a while)..."
# Install Lamassu stack

npm -g install git+https://git@github.com/startcoin-project/lamassu-server.git git+https://git@github.com/startcoin-project/lamassu-admin.git lamassu-scripts migrate >> $debug 2>&1
[ $? -ne 0 ] && fail "Lamassu stack installation failed"

echo "Installing Lamassu services..."
if [ "$service" == "upstart" ]; then
  upstart "lamassu-server"
  upstart "lamassu-admin"
fi

# Bootstrap lamassu database
# We also have to use `-h 127.0.0.1` because the default type of authentication
# for `local` connection is `peer`, which checks username of the user running
# `psql` command.
echo "Bootstrapping PostgreSQL..."
SQL_FILE="$(npm -g root)/lamassu-scripts/database/lamassu.sql"
PGPASSWORD="$password" psql -h 127.0.0.1 lamassu lamassu >> $debug 2>&1 < $SQL_FILE

[ $? -ne 0 ] && fail "Bootstrapping PostgreSQL failed"

echo "Creating a Lamassu user account"
DATABASE_URL="postgres://lamassu:$password@localhost/lamassu" lamassu-useradd "$admin_username" "$admin_password"
[ $? -ne 0 ] && fail "Adding a user failed"

ip=$(ifconfig eth0 | grep "inet addr" | awk -F: '{print $2}' | awk '{print $1}')

# Generate SSL certificates for lamassu-server and lamassu-admin.
echo "Generating SSL certificates..."
openssl req -new -newkey rsa:8092 -days 9999 -nodes -x509 -subj "/C=US/ST=/L=/O=/CN=$ip:8081" -keyout /root/lamassu-admin.key  -out /root/lamassu-admin.crt >> $debug 2>&1
[ $? -ne 0 ] && fail "Generating a certificate for lamassu-admin failed"

openssl req -new -newkey rsa:8092 -days 9999 -nodes -x509 -subj "/C=US/ST=/L=/O=/CN=$ip:3000" -keyout /root/lamassu-server.key -out /root/lamassu-server.crt >> $debug 2>&1
[ $? -ne 0 ] && fail "Generating a certificate for lamassu-server failed"

chmod 600 /root/{*.key,*.crt}

echo "Starting Lamassu services..."
start lamassu-admin >> $debug 2>&1
[ $? -ne 0 ] && fail "Starting lamassu-admin failed"

start lamassu-server >> $debug 2>&1
[ $? -ne 0 ] && fail "Starting lamassu-server failed"

echo
echo "Done! Now it's time to configure Lamassu stack."
echo "Open https://$ip:8081 in your browser to access "
echo "your admin panel."